!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module ffunctions ! in 
    interface  ! in :functions
        module mag_functions ! in :ffunctions:mag_functions.f90
            function magnetization_vector(num_sites,state) ! in :ffunctions:mag_functions.f90:functions
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                real*8 dimension(3) :: magnetization_vector
            end function magnetization_vector
            function magnetization_vector_by_type(num_sites,state,num_types,types) ! in :ffunctions:mag_functions.f90:functions
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                integer intent(in) :: num_types
                integer dimension(num_sites),intent(in) :: types
                real*8 dimension(num_types,3),depend(num_types) :: magnetization_vector_by_type
            end function magnetization_vector_by_type
            function total_magnetization(num_sites,state) ! in :ffunctions:mag_functions.f90:functions
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                real*8 :: total_magnetization
            end function total_magnetization
            function magnetization_by_type(num_sites,state,num_types,types) ! in :ffunctions:mag_functions.f90:functions
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                integer intent(in) :: num_types
                integer dimension(num_sites),intent(in) :: types
                real*8 dimension(num_types),depend(num_types) :: magnetization_by_type
            end function magnetization_by_type
        end module mag_functions


        module external_fields ! in :external_spin_fields:external_spin_fields.f90
            real*8, parameter,optional :: pi=4*atan(1.d0)
            real*8, parameter,optional :: kb=1.38064852e-29
            function random_normal_matrix(num_sites) ! in :external_fields.mod:external_spin_fields.f90:external_fields
                integer intent(in) :: num_sites
                real*8 dimension(num_sites,3) :: random_normal_matrix
            end function random_normal_matrix
            function thermal_external_field(num_sites,damping,temperature,gyromagnetic,deltat,magnitude_spin_moment) ! in :external_fields.mod:external_spin_fields.f90:external_fields
                integer intent(in) :: num_sites
                real*8 intent(in) :: damping
                real*8 intent(in) :: temperature
                real*8 intent(in) :: gyromagnetic
                integer intent(in) :: deltat
                real*8 intent(in) :: magnitude_spin_moment
                real*8 dimension(num_sites,3) :: thermal_external_field
            end function thermal_external_field
            function external_magnetic_spin_field(num_sites,intensities,directions) ! in :external_spin_fields:external_spin_fields.f90:external_fields
                integer, intent(hide),check(len(intensities)==num_sites),depend(intensities) :: num_sites=len(intensities)
                real*8 dimension(num_sites),intent(in) :: intensities
                real*8 dimension(num_sites,3),intent(in),depend(num_sites) :: directions
                real*8 dimension(num_sites,3),depend(num_sites) :: external_magnetic_spin_field
            end function external_magnetic_spin_field
        end module external_fields


        module spin_fields ! in :spin_fields:spin_fields.f90
            function exchange_interaction_field(num_sites,state,num_interactions,j_exchange,num_neighbors,neighbors) ! in :spin_fields:spin_fields.f90:spin_fields
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                integer, intent(hide),check(len(j_exchange)==num_interactions),depend(j_exchange) :: num_interactions=len(j_exchange)
                real*8 dimension(num_interactions),intent(in) :: j_exchange
                integer dimension(num_sites),intent(in),depend(num_sites) :: num_neighbors
                integer dimension(num_interactions),intent(in),depend(num_interactions) :: neighbors
                real*8 dimension(num_sites,3),depend(num_sites) :: exchange_interaction_field
            end function exchange_interaction_field
        end module spin_fields
    end interface
end python module ffunctions

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
