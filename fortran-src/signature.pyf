!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module ffunctions ! in 
    interface  ! in :functions
        module mag_functions ! in :ffunctions:mag_functions.f90
            function magnetization_vector(num_sites,state) ! in :ffunctions:mag_functions.f90:functions
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                real*8 dimension(3) :: magnetization_vector
            end function magnetization_vector
            function magnetization_vector_by_type(num_sites,state,num_types,types) ! in :ffunctions:mag_functions.f90:functions
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                integer intent(in) :: num_types
                integer dimension(num_sites),intent(in) :: types
                real*8 dimension(num_types,3),depend(num_types) :: magnetization_vector_by_type
            end function magnetization_vector_by_type
            function total_magnetization(num_sites,state) ! in :ffunctions:mag_functions.f90:functions
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                real*8 :: total_magnetization
            end function total_magnetization
            function magnetization_by_type(num_sites,state,num_types,types) ! in :ffunctions:mag_functions.f90:functions
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                integer intent(in) :: num_types
                integer dimension(num_sites),intent(in) :: types
                real*8 dimension(num_types),depend(num_types) :: magnetization_by_type
            end function magnetization_by_type
        end module mag_functions


        module external_fields ! in :external_spin_fields:external_spin_fields.f90
            function thermal_field(num_sites,random_normal_matrix,temperature,magnitude_spin_moment,damping,deltat,gyromagnetic,kB) ! in :external_fields:external_spin_fields.f90:external_fields
                integer, intent(hide),check(shape(random_normal_matrix,0)==num_sites),depend(random_normal_matrix) :: num_sites=shape(random_normal_matrix,0)
                real*8 dimension(num_sites,3),intent(in) :: random_normal_matrix
                real*8 dimension(num_sites),intent(in),depend(num_sites) :: temperature
                real*8 dimension(num_sites),intent(in),depend(num_sites) :: magnitude_spin_moment
                real*8 intent(in) :: damping
                real*8 intent(in) :: deltat
                real*8 intent(in) :: gyromagnetic
                real*8 intent(in) :: kB
                real*8 dimension(num_sites,3),depend(num_sites) :: thermal_field
            end function thermal_field
            function magnetic_field(num_sites,intensities,directions) ! in :external_spin_fields:external_spin_fields.f90:external_fields
                integer, intent(hide),check(len(intensities)==num_sites),depend(intensities) :: num_sites=len(intensities)
                real*8 dimension(num_sites),intent(in) :: intensities
                real*8 dimension(num_sites,3),intent(in),depend(num_sites) :: directions
                real*8 dimension(num_sites,3),depend(num_sites) :: magnetic_field
            end function magnetic_field
        end module external_fields


        module spin_fields ! in :spin_fields:spin_fields.f90
            function exchange_interaction_field(num_sites,state,magnitude_spin_moment,num_interactions,j_exchange,num_neighbors,neighbors) ! in :spin_fields:spin_fields.f90:spin_fields
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                real*8 dimension(num_sites),intent(in),depend(num_sites) :: magnitude_spin_moment
                integer, intent(hide),check(len(j_exchange)==num_interactions, shape(neighbors, 0)==num_interactions),depend(j_exchange, neighbors) :: num_interactions=len(j_exchange)
                real*8 dimension(num_interactions),intent(in) :: j_exchange
                integer dimension(num_sites),intent(in),depend(num_sites) :: num_neighbors
                integer dimension(num_interactions),intent(in) :: neighbors
                real*8 dimension(num_sites,3),depend(num_sites) :: exchange_interaction_field
            end function exchange_interaction_field

            function anisotropy_interaction_field(num_sites,state,magnitude_spin_moment,anisotropy_constant,anisotropy_vector) ! in :spin_fields:spin_fields.f90:spin_fields
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                real*8 dimension(num_sites),intent(in),depend(num_sites) :: magnitude_spin_moment
                real*8 dimension(num_sites),intent(in),depend(num_sites) :: anisotropy_constant
                real*8 dimension(num_sites,3),intent(in),depend(num_sites) :: anisotropy_vector
                real*8 dimension(num_sites,3),depend(num_sites) :: anisotropy_interaction_field
            end function anisotropy_interaction_field
        end module spin_fields

        module heun ! in :heun:heun.f90
            use external_fields
            use spin_fields
            function integrate(num_sites,state,magnitude_spin_moment,random_normal_matrix,temperature,damping,deltat,gyromagnetic,kB,field_intensities,field_directions,num_interactions,j_exchange,num_neighbors,neighbors,anisotropy_constant,anisotropy_vector) ! in :maricadita:heun.f90:heun
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                real*8 dimension(num_sites),intent(in),depend(num_sites) :: magnitude_spin_moment
                real*8 dimension(num_sites,3),intent(in),depend(num_sites) :: random_normal_matrix
                real*8 dimension(num_sites),intent(in),depend(num_sites) :: temperature
                real*8 intent(in) :: damping
                real*8 intent(in) :: deltat
                real*8 intent(in) :: gyromagnetic
                real*8 intent(in) :: kB
                real*8 dimension(num_sites),intent(in),depend(num_sites) :: field_intensities
                real*8 dimension(num_sites,3),intent(in),depend(num_sites) :: field_directions
                integer, intent(hide),check(len(j_exchange)==num_interactions, shape(neighbors, 0)==num_interactions),depend(j_exchange, neighbors) :: num_interactions=len(j_exchange)
                real*8 dimension(num_interactions),intent(in) :: j_exchange
                integer dimension(num_sites),intent(in),depend(num_sites) :: num_neighbors
                integer dimension(num_interactions),intent(in) :: neighbors
                real*8 dimension(num_sites),intent(in),depend(num_sites) :: anisotropy_constant
                real*8 dimension(num_sites,3),intent(in),depend(num_sites) :: anisotropy_vector
                real*8 dimension(num_sites,3),depend(num_sites) :: integrate
            end function integrate
        end module heun

        module energy ! in :energy:energy.f90
            function exchange_energy(num_sites,num_interactions,state,j_exchange,num_neighbors,neighbors) ! in :energy:energy.f90:energy
                integer,intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                integer,intent(hide),check(len(j_exchange)>=num_interactions),depend(j_exchange) :: num_interactions=len(j_exchange)
                real*8 dimension(num_sites,3),intent(in) :: state
                real*8 dimension(num_interactions),intent(in) :: j_exchange
                integer dimension(num_sites),intent(in),depend(num_sites) :: num_neighbors
                integer dimension(num_interactions),intent(in),depend(num_interactions) :: neighbors
                real*8 dimension(num_sites,3) :: exchange_energy
            end function exchange_energy
            function anisotropy_energy(num_sites,state,anisotropy_constant,anisotropy_vector) ! in :energy:energy.f90:energy
                integer, intent(hide),check(shape(state,0)==num_sites),depend(state) :: num_sites=shape(state,0)
                real*8 dimension(num_sites,3),intent(in) :: state
                real*8 dimension(num_sites),intent(in),depend(num_sites) :: anisotropy_constant
                real*8 dimension(num_sites,3),intent(in),depend(num_sites) :: anisotropy_vector
                real*8 dimension(num_sites,3) :: anisotropy_energy
            end function anisotropy_energy
            function magnetic_field(num_sites,magnitude_spin_moment,state,intensities,directions) ! in :energy:energy.f90:energy
                integer, intent(hide),check(len(magnitude_spin_moment)>=num_sites),depend(magnitude_spin_moment) :: num_sites=len(magnitude_spin_moment)
                real*8 dimension(num_sites) :: magnitude_spin_moment
                real*8 dimension(num_sites,3),intent(in),depend(num_sites) :: state
                real*8 dimension(num_sites),intent(in),depend(num_sites) :: intensities
                real*8 dimension(num_sites,3),intent(in),depend(num_sites) :: directions
                real*8 dimension(num_sites,3) :: magnetic_field
            end function magnetic_field
        end module energy
    end interface 
end python module ffunctions

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
